# -*- coding: utf-8 -*-
"""LaptopProductLineupAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fhm9d0WuMmbKeshKs6iqS_dSa1V7d_ap
"""

pip install pandas scikit-learn

import pandas as pd

df = pd.read_csv('/content/synthetic_wtp_laptop_data.csv')

print("Dataset loaded. First 5 rows:")
print(df.head())

features = ['Memory', 'Storage', 'CPU_class', 'Screen_size']

target = 'price'

X = df[features]
y = df[target]

print(f"\nFeatures selected: {features}")
print(f"Target selected: {target}")

from sklearn.linear_model import LinearRegression

model = LinearRegression() # Initialize the model
model.fit(X, y) # Train the model

print("\nPredictive model (Linear Regression) trained successfully.")

# Base laptop specifications
base_specs = {
    'Memory': 16,
    'Storage': 512,
    'CPU_Class': 1,
    'Screen_Size': 14.0
}

# Define each upgrade option: how specs change and their cost
upgrade_options = {
    'Add 16 GB memory': {
        'specs_change': {'Memory': 32}, # Base 16 + 16 = 32 GB
        'cost': 7000
    },
    'Add 512 GB storage': {
        'specs_change': {'Storage': 1024}, # Base 512 + 512 = 1024 GB
        'cost': 5000
    },
    'Upgrade CPU class by 1 level': {
        'specs_change': {'CPU_Class': 2}, # Base Class 1 + 1 = 2
        'cost': 15000
    },
    'Increase screen size from 14 to 16 inches': {
        'specs_change': {'Screen_Size': 16.0}, # New screen size
        'cost': 3000
    }
}

print("\nBase specs and upgrade options defined.")

# Ensure that the column names in 'features' match the keys in upgraded_specs
features = ['Memory', 'Storage', 'CPU_class', 'Screen_size']

results = []

for option_name, details in upgrade_options.items():
    upgraded_specs = base_specs.copy()
    upgraded_specs.update(details['specs_change'])

    # Normalize keys if needed (optional safety step)
    upgraded_specs = {k.replace('CPU_Class', 'CPU_class').replace('Screen_Size', 'Screen_size'): v
                      for k, v in upgraded_specs.items()}

    # Create DataFrame using the correct feature order
    upgraded_df_for_prediction = pd.DataFrame([upgraded_specs])[features]

    predicted_price = model.predict(upgraded_df_for_prediction)[0]
    additional_cost = details['cost']

    results.append({
        'Upgrade Option': option_name,
        'Predicted Market Price (Yen)': round(predicted_price),
        'Additional Cost (Yen)': additional_cost
    })

results_df = pd.DataFrame(results)

print("\nPredicted market prices for upgraded models:")
print(results_df)

# Calculate the "Profit Score"
results_df['Profit Score (Yen)'] = results_df['Predicted Market Price (Yen)'] - results_df['Additional Cost (Yen)']

# Sort the results to find the best options
results_df_sorted = results_df.sort_values(by='Profit Score (Yen)', ascending=False)

print("\n--- Analysis of Upgrade Options (Sorted by Profit Score) ---")
print(results_df_sorted)

print("\n--- Top TWO upgrades to choose for highest gross profit ---")
top_two_options = results_df_sorted.head(2)['Upgrade Option'].tolist()
print(top_two_options)

